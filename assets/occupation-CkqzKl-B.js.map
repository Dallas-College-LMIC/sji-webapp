{"version":3,"file":"occupation-CkqzKl-B.js","sources":["../../src/js/occupation.js","../../src/js/occupation-main.js"],"sourcesContent":["import { BaseMapController } from './controllers/baseMapController.js';\n\nexport class OccupationMapController extends BaseMapController {\n    constructor(containerId) {\n        super(containerId, 'occupation_data');\n        this.currentOccupationId = null;\n        this.geojsonData = null;\n        this.initialize();\n    }\n\n    async initialize() {\n        // Initialize map immediately without waiting for occupation IDs\n        await this.initializeMapWithEmptySource();\n        \n        // Load occupation IDs asynchronously (non-blocking)\n        this.loadOccupationIds().catch(error => {\n            console.error(\"Failed to load occupation IDs:\", error);\n        });\n    }\n\n    async loadOccupationIds() {\n        this.showLoading('loading');\n        \n        try {\n            // Check cache first\n            const cachedData = this.getCachedOccupationIds();\n            if (cachedData) {\n                console.log(\"Using cached occupation IDs\");\n                this.populateOccupationDropdown(cachedData);\n                this.hideLoading('loading');\n                return;\n            }\n            \n            // Fetch from API if not cached\n            const response = await this.apiService.getOccupationIds();\n            console.log(\"Loaded occupation IDs response:\", response);\n            \n            // Handle new API structure - extract occupation_ids array from response\n            const occupationIds = response.occupation_ids || response;\n            \n            // Cache the data\n            this.cacheOccupationIds(occupationIds);\n            \n            this.populateOccupationDropdown(occupationIds);\n            \n            this.hideLoading('loading');\n        } catch (error) {\n            console.error(\"Error loading occupation IDs:\", error);\n            this.showError('loading', 'Error loading occupations');\n        }\n    }\n    \n    populateOccupationDropdown(occupationIds) {\n        const select = $('#occupation-select');\n        \n        // Clear existing options except the first one\n        select.find('option:not(:first)').remove();\n        \n        // Add occupation options\n        occupationIds.forEach(id => {\n            select.append(new Option(id, id));\n        });\n        \n        // Initialize Select2 for searchable dropdown\n        select.select2({\n            placeholder: \"Search and select an occupation...\",\n            allowClear: true,\n            width: '100%'\n        });\n        \n        // Set up change event listener\n        select.on('change', (e) => {\n            const selectedOccupation = $(e.target).val();\n            if (selectedOccupation) {\n                this.loadOccupationData(selectedOccupation);\n            } else {\n                this.clearMap();\n            }\n        });\n    }\n    \n    async loadOccupationData(occupationId) {\n        this.currentOccupationId = occupationId;\n        \n        try {\n            const data = await this.apiService.getGeojsonData({ occupation_id: occupationId });\n            console.log(\"Fetched occupation data:\", data);\n            this.geojsonData = data;\n            \n            // Update the map source\n            this.mapManager.addSource(this.sourceId, data);\n            \n            // Remove existing layer if any\n            if (this.mapManager.map.getLayer('occupation-layer')) {\n                this.mapManager.map.removeLayer('occupation-layer');\n            }\n            \n            // Add the occupation layer\n            this.addOccupationLayer();\n            \n            // Update export link\n            this.updateExportLink({ occupation_id: occupationId });\n            \n        } catch (error) {\n            console.error(\"Error loading occupation data:\", error);\n        }\n    }\n    \n    addOccupationLayer() {\n        // Assuming the data has a zscore property for the occupation\n        const propertyName = `occupation_${this.currentOccupationId}_zscore_cat`;\n        \n        this.mapManager.addLayer('occupation-layer', this.sourceId, propertyName, 'visible');\n        this.addPopupForOccupation();\n    }\n    \n    addPopupForOccupation() {\n        const zscoreProperty = `occupation_${this.currentOccupationId}_zscore`;\n        \n        this.mapManager.addPopupEvents('occupation-layer', `Occupation: ${this.currentOccupationId}`, zscoreProperty);\n    }\n    \n    clearMap() {\n        super.clearMap();\n        this.currentOccupationId = null;\n    }\n\n    getLayerIds() {\n        return ['occupation-layer'];\n    }\n    \n    getCachedOccupationIds() {\n        const cacheKey = 'occupation_ids_cache';\n        const cacheTimeKey = 'occupation_ids_cache_time';\n        const cacheTTL = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n        \n        try {\n            const cachedTime = localStorage.getItem(cacheTimeKey);\n            const cachedData = localStorage.getItem(cacheKey);\n            \n            if (!cachedTime || !cachedData) {\n                return null;\n            }\n            \n            const cacheAge = Date.now() - parseInt(cachedTime);\n            \n            // Check if cache is expired\n            if (cacheAge > cacheTTL) {\n                localStorage.removeItem(cacheKey);\n                localStorage.removeItem(cacheTimeKey);\n                return null;\n            }\n            \n            return JSON.parse(cachedData);\n        } catch (error) {\n            console.error(\"Error reading from cache:\", error);\n            return null;\n        }\n    }\n    \n    cacheOccupationIds(occupationIds) {\n        const cacheKey = 'occupation_ids_cache';\n        const cacheTimeKey = 'occupation_ids_cache_time';\n        \n        try {\n            localStorage.setItem(cacheKey, JSON.stringify(occupationIds));\n            localStorage.setItem(cacheTimeKey, Date.now().toString());\n        } catch (error) {\n            console.error(\"Error writing to cache:\", error);\n            // Continue even if caching fails\n        }\n    }\n    \n    clearOccupationCache() {\n        localStorage.removeItem('occupation_ids_cache');\n        localStorage.removeItem('occupation_ids_cache_time');\n    }\n}","import { OccupationMapController } from './occupation.js';\nimport { AppInitializer } from './utils/appInitializer.js';\nimport '../styles/shared.css';\n\n// Setup global error handlers\nAppInitializer.setupGlobalErrorHandlers();\n\n// Initialize the occupation map controller\nAppInitializer.initialize('mainmap', OccupationMapController, 'Occupation Map');"],"names":["OccupationMapController","BaseMapController","containerId","error","cachedData","response","occupationIds","select","id","e","selectedOccupation","occupationId","data","propertyName","zscoreProperty","cacheKey","cacheTimeKey","cachedTime","AppInitializer"],"mappings":"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"}